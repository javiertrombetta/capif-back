services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: javiertrombetta/capif-back:latest
    container_name: capif-back
    entrypoint: /usr/src/app/entrypoint.sh
    restart: always
    ports:
      - '${PORT}:${PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:      
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      GLOBAL_PREFIX: ${GLOBAL_PREFIX}
      PORT: ${PORT}
      RESET_TOKEN_EXPIRATION: ${RESET_TOKEN_EXPIRATION}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      TZ: ${TZ}
      FRONTEND_URL: ${FRONTEND_URL}
      SMTP_SERVICE: ${SMTP_SERVICE}
      SMTP_FROM: ${SMTP_FROM}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    networks:
      - capif-net

  postgres:
    image: postgres:15.8-alpine3.20
    container_name: postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - capif-net

  redis:
    image: redis:alpine3.20
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    environment:
      TZ: ${TZ}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - capif-net

volumes:
  postgresdata:

networks:
  capif-net:
    driver: bridge